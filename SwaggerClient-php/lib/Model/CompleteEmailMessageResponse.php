<?php
/**
 * CompleteEmailMessageResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Transactional API
 *
 * # Introduction    This API is a service provided by [E-goi](www.e-goi.com) to send transactional messages.    Transactional Messaging is a 1-to-1 communication channel, usually from an organization directed to a specific consumer.   They can be triggered by:    * __Actions__ - The consumer interacts with the organization (ie.: online shopping);  * __Time__ - The consumer's actions are time-bounded by the organization (ie.: period of inactivity).    Because of the nature of these messages,   it is expected that the consumer is interested in the content of these messages.   Therefore, they have a different treatment from marketing messages, and have a higher acceptance and opening rate.    >DISCLAIMER  >  >Please notice that this platform is more delicate in regards to the nature and processing of its messages.  >  >It should NOT be used as a mean of mass marketing, scams, phishing or overall unruly behaviour.   >  >Failure to comply may lead to limitation of use and even termination of account.    ***
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.21
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CompleteEmailMessageResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CompleteEmailMessageResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CompleteEmailMessageResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bcc' => 'string[]',
'group_id' => 'int',
'text_body' => 'string',
'html_body' => 'string',
'template_id' => 'string',
'sender_id' => 'int',
'id' => 'int',
'create_date' => '\DateTime',
'open_tracking' => 'bool',
'cc' => 'string[]',
'subject' => 'string',
'status' => 'string',
'unsubscribe' => 'bool',
'subscriber_id' => 'int',
'click_tracking' => 'bool',
'domain_id' => 'int',
'reply_to_id' => 'int',
'domain' => 'string',
'name' => 'string',
'register' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bcc' => null,
'group_id' => 'int32',
'text_body' => null,
'html_body' => null,
'template_id' => null,
'sender_id' => 'int32',
'id' => 'int32',
'create_date' => 'date-time',
'open_tracking' => null,
'cc' => null,
'subject' => null,
'status' => null,
'unsubscribe' => null,
'subscriber_id' => 'int32',
'click_tracking' => null,
'domain_id' => 'int32',
'reply_to_id' => 'int32',
'domain' => null,
'name' => null,
'register' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bcc' => 'bcc',
'group_id' => 'groupId',
'text_body' => 'textBody',
'html_body' => 'htmlBody',
'template_id' => 'templateId',
'sender_id' => 'senderId',
'id' => 'id',
'create_date' => 'createDate',
'open_tracking' => 'openTracking',
'cc' => 'cc',
'subject' => 'subject',
'status' => 'status',
'unsubscribe' => 'unsubscribe',
'subscriber_id' => 'subscriberId',
'click_tracking' => 'clickTracking',
'domain_id' => 'domainId',
'reply_to_id' => 'replyToId',
'domain' => 'domain',
'name' => 'name',
'register' => 'register'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bcc' => 'setBcc',
'group_id' => 'setGroupId',
'text_body' => 'setTextBody',
'html_body' => 'setHtmlBody',
'template_id' => 'setTemplateId',
'sender_id' => 'setSenderId',
'id' => 'setId',
'create_date' => 'setCreateDate',
'open_tracking' => 'setOpenTracking',
'cc' => 'setCc',
'subject' => 'setSubject',
'status' => 'setStatus',
'unsubscribe' => 'setUnsubscribe',
'subscriber_id' => 'setSubscriberId',
'click_tracking' => 'setClickTracking',
'domain_id' => 'setDomainId',
'reply_to_id' => 'setReplyToId',
'domain' => 'setDomain',
'name' => 'setName',
'register' => 'setRegister'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bcc' => 'getBcc',
'group_id' => 'getGroupId',
'text_body' => 'getTextBody',
'html_body' => 'getHtmlBody',
'template_id' => 'getTemplateId',
'sender_id' => 'getSenderId',
'id' => 'getId',
'create_date' => 'getCreateDate',
'open_tracking' => 'getOpenTracking',
'cc' => 'getCc',
'subject' => 'getSubject',
'status' => 'getStatus',
'unsubscribe' => 'getUnsubscribe',
'subscriber_id' => 'getSubscriberId',
'click_tracking' => 'getClickTracking',
'domain_id' => 'getDomainId',
'reply_to_id' => 'getReplyToId',
'domain' => 'getDomain',
'name' => 'getName',
'register' => 'getRegister'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bcc'] = isset($data['bcc']) ? $data['bcc'] : null;
        $this->container['group_id'] = isset($data['group_id']) ? $data['group_id'] : null;
        $this->container['text_body'] = isset($data['text_body']) ? $data['text_body'] : null;
        $this->container['html_body'] = isset($data['html_body']) ? $data['html_body'] : null;
        $this->container['template_id'] = isset($data['template_id']) ? $data['template_id'] : null;
        $this->container['sender_id'] = isset($data['sender_id']) ? $data['sender_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['create_date'] = isset($data['create_date']) ? $data['create_date'] : null;
        $this->container['open_tracking'] = isset($data['open_tracking']) ? $data['open_tracking'] : null;
        $this->container['cc'] = isset($data['cc']) ? $data['cc'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['unsubscribe'] = isset($data['unsubscribe']) ? $data['unsubscribe'] : null;
        $this->container['subscriber_id'] = isset($data['subscriber_id']) ? $data['subscriber_id'] : null;
        $this->container['click_tracking'] = isset($data['click_tracking']) ? $data['click_tracking'] : null;
        $this->container['domain_id'] = isset($data['domain_id']) ? $data['domain_id'] : null;
        $this->container['reply_to_id'] = isset($data['reply_to_id']) ? $data['reply_to_id'] : null;
        $this->container['domain'] = isset($data['domain']) ? $data['domain'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['register'] = isset($data['register']) ? $data['register'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bcc
     *
     * @return string[]
     */
    public function getBcc()
    {
        return $this->container['bcc'];
    }

    /**
     * Sets bcc
     *
     * @param string[] $bcc bcc
     *
     * @return $this
     */
    public function setBcc($bcc)
    {
        $this->container['bcc'] = $bcc;

        return $this;
    }

    /**
     * Gets group_id
     *
     * @return int
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     *
     * @param int $group_id group_id
     *
     * @return $this
     */
    public function setGroupId($group_id)
    {
        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets text_body
     *
     * @return string
     */
    public function getTextBody()
    {
        return $this->container['text_body'];
    }

    /**
     * Sets text_body
     *
     * @param string $text_body text_body
     *
     * @return $this
     */
    public function setTextBody($text_body)
    {
        $this->container['text_body'] = $text_body;

        return $this;
    }

    /**
     * Gets html_body
     *
     * @return string
     */
    public function getHtmlBody()
    {
        return $this->container['html_body'];
    }

    /**
     * Sets html_body
     *
     * @param string $html_body html_body
     *
     * @return $this
     */
    public function setHtmlBody($html_body)
    {
        $this->container['html_body'] = $html_body;

        return $this;
    }

    /**
     * Gets template_id
     *
     * @return string
     */
    public function getTemplateId()
    {
        return $this->container['template_id'];
    }

    /**
     * Sets template_id
     *
     * @param string $template_id template_id
     *
     * @return $this
     */
    public function setTemplateId($template_id)
    {
        $this->container['template_id'] = $template_id;

        return $this;
    }

    /**
     * Gets sender_id
     *
     * @return int
     */
    public function getSenderId()
    {
        return $this->container['sender_id'];
    }

    /**
     * Sets sender_id
     *
     * @param int $sender_id sender_id
     *
     * @return $this
     */
    public function setSenderId($sender_id)
    {
        $this->container['sender_id'] = $sender_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime $create_date create_date
     *
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets open_tracking
     *
     * @return bool
     */
    public function getOpenTracking()
    {
        return $this->container['open_tracking'];
    }

    /**
     * Sets open_tracking
     *
     * @param bool $open_tracking open_tracking
     *
     * @return $this
     */
    public function setOpenTracking($open_tracking)
    {
        $this->container['open_tracking'] = $open_tracking;

        return $this;
    }

    /**
     * Gets cc
     *
     * @return string[]
     */
    public function getCc()
    {
        return $this->container['cc'];
    }

    /**
     * Sets cc
     *
     * @param string[] $cc cc
     *
     * @return $this
     */
    public function setCc($cc)
    {
        $this->container['cc'] = $cc;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject subject
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets unsubscribe
     *
     * @return bool
     */
    public function getUnsubscribe()
    {
        return $this->container['unsubscribe'];
    }

    /**
     * Sets unsubscribe
     *
     * @param bool $unsubscribe unsubscribe
     *
     * @return $this
     */
    public function setUnsubscribe($unsubscribe)
    {
        $this->container['unsubscribe'] = $unsubscribe;

        return $this;
    }

    /**
     * Gets subscriber_id
     *
     * @return int
     */
    public function getSubscriberId()
    {
        return $this->container['subscriber_id'];
    }

    /**
     * Sets subscriber_id
     *
     * @param int $subscriber_id subscriber_id
     *
     * @return $this
     */
    public function setSubscriberId($subscriber_id)
    {
        $this->container['subscriber_id'] = $subscriber_id;

        return $this;
    }

    /**
     * Gets click_tracking
     *
     * @return bool
     */
    public function getClickTracking()
    {
        return $this->container['click_tracking'];
    }

    /**
     * Sets click_tracking
     *
     * @param bool $click_tracking click_tracking
     *
     * @return $this
     */
    public function setClickTracking($click_tracking)
    {
        $this->container['click_tracking'] = $click_tracking;

        return $this;
    }

    /**
     * Gets domain_id
     *
     * @return int
     */
    public function getDomainId()
    {
        return $this->container['domain_id'];
    }

    /**
     * Sets domain_id
     *
     * @param int $domain_id domain_id
     *
     * @return $this
     */
    public function setDomainId($domain_id)
    {
        $this->container['domain_id'] = $domain_id;

        return $this;
    }

    /**
     * Gets reply_to_id
     *
     * @return int
     */
    public function getReplyToId()
    {
        return $this->container['reply_to_id'];
    }

    /**
     * Sets reply_to_id
     *
     * @param int $reply_to_id reply_to_id
     *
     * @return $this
     */
    public function setReplyToId($reply_to_id)
    {
        $this->container['reply_to_id'] = $reply_to_id;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain domain
     *
     * @return $this
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets register
     *
     * @return bool
     */
    public function getRegister()
    {
        return $this->container['register'];
    }

    /**
     * Sets register
     *
     * @param bool $register register
     *
     * @return $this
     */
    public function setRegister($register)
    {
        $this->container['register'] = $register;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
