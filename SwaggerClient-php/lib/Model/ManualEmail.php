<?php
/**
 * ManualEmail
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Transactional API
 *
 * # Introduction    This API is a service provided by [E-goi](www.e-goi.com) to send transactional messages.    Transactional Messaging is a 1-to-1 communication channel, usually from an organization directed to a specific consumer.   They can be triggered by:    * __Actions__ - The consumer interacts with the organization (ie.: online shopping);  * __Time__ - The consumer's actions are time-bounded by the organization (ie.: period of inactivity).    Because of the nature of these messages,   it is expected that the consumer is interested in the content of these messages.   Therefore, they have a different treatment from marketing messages, and have a higher acceptance and opening rate.    >DISCLAIMER  >  >Please notice that this platform is more delicate in regards to the nature and processing of its messages.  >  >It should NOT be used as a mean of mass marketing, scams, phishing or overall unruly behaviour.   >  >Failure to comply may lead to limitation of use and even termination of account.    ***
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.21
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ManualEmail Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ManualEmail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Manual_Email';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'domain' => 'string',
'sender_id' => 'string',
'sender_name' => 'string',
'to' => 'string[]',
'cc' => 'string[]',
'bcc' => 'string[]',
'reply_to_id' => 'string',
'subject' => 'string',
'html_body' => 'string',
'text_body' => 'string',
'open_tracking' => 'bool',
'click_tracking' => 'bool',
'attachment' => '\Swagger\Client\Model\AttachmentRequest[]',
'merge_tags' => 'string[]',
'custom_data' => 'string',
'priority' => 'string',
'registered' => 'bool',
'header' => '\Swagger\Client\Model\HeaderOptionsRequest',
'group' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'domain' => null,
'sender_id' => null,
'sender_name' => null,
'to' => null,
'cc' => null,
'bcc' => null,
'reply_to_id' => null,
'subject' => null,
'html_body' => null,
'text_body' => null,
'open_tracking' => null,
'click_tracking' => null,
'attachment' => null,
'merge_tags' => null,
'custom_data' => null,
'priority' => null,
'registered' => null,
'header' => null,
'group' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'domain' => 'domain',
'sender_id' => 'senderId',
'sender_name' => 'senderName',
'to' => 'to',
'cc' => 'cc',
'bcc' => 'bcc',
'reply_to_id' => 'replyToId',
'subject' => 'subject',
'html_body' => 'htmlBody',
'text_body' => 'textBody',
'open_tracking' => 'openTracking',
'click_tracking' => 'clickTracking',
'attachment' => 'attachment',
'merge_tags' => 'mergeTags',
'custom_data' => 'customData',
'priority' => 'priority',
'registered' => 'registered',
'header' => 'header',
'group' => 'group'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'domain' => 'setDomain',
'sender_id' => 'setSenderId',
'sender_name' => 'setSenderName',
'to' => 'setTo',
'cc' => 'setCc',
'bcc' => 'setBcc',
'reply_to_id' => 'setReplyToId',
'subject' => 'setSubject',
'html_body' => 'setHtmlBody',
'text_body' => 'setTextBody',
'open_tracking' => 'setOpenTracking',
'click_tracking' => 'setClickTracking',
'attachment' => 'setAttachment',
'merge_tags' => 'setMergeTags',
'custom_data' => 'setCustomData',
'priority' => 'setPriority',
'registered' => 'setRegistered',
'header' => 'setHeader',
'group' => 'setGroup'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'domain' => 'getDomain',
'sender_id' => 'getSenderId',
'sender_name' => 'getSenderName',
'to' => 'getTo',
'cc' => 'getCc',
'bcc' => 'getBcc',
'reply_to_id' => 'getReplyToId',
'subject' => 'getSubject',
'html_body' => 'getHtmlBody',
'text_body' => 'getTextBody',
'open_tracking' => 'getOpenTracking',
'click_tracking' => 'getClickTracking',
'attachment' => 'getAttachment',
'merge_tags' => 'getMergeTags',
'custom_data' => 'getCustomData',
'priority' => 'getPriority',
'registered' => 'getRegistered',
'header' => 'getHeader',
'group' => 'getGroup'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PRIORITY_URGENT = 'urgent';
const PRIORITY_NON_URGENT = 'non-urgent';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPriorityAllowableValues()
    {
        return [
            self::PRIORITY_URGENT,
self::PRIORITY_NON_URGENT,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['domain'] = isset($data['domain']) ? $data['domain'] : null;
        $this->container['sender_id'] = isset($data['sender_id']) ? $data['sender_id'] : null;
        $this->container['sender_name'] = isset($data['sender_name']) ? $data['sender_name'] : null;
        $this->container['to'] = isset($data['to']) ? $data['to'] : null;
        $this->container['cc'] = isset($data['cc']) ? $data['cc'] : null;
        $this->container['bcc'] = isset($data['bcc']) ? $data['bcc'] : null;
        $this->container['reply_to_id'] = isset($data['reply_to_id']) ? $data['reply_to_id'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['html_body'] = isset($data['html_body']) ? $data['html_body'] : null;
        $this->container['text_body'] = isset($data['text_body']) ? $data['text_body'] : null;
        $this->container['open_tracking'] = isset($data['open_tracking']) ? $data['open_tracking'] : false;
        $this->container['click_tracking'] = isset($data['click_tracking']) ? $data['click_tracking'] : false;
        $this->container['attachment'] = isset($data['attachment']) ? $data['attachment'] : null;
        $this->container['merge_tags'] = isset($data['merge_tags']) ? $data['merge_tags'] : null;
        $this->container['custom_data'] = isset($data['custom_data']) ? $data['custom_data'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : 'non-urgent';
        $this->container['registered'] = isset($data['registered']) ? $data['registered'] : false;
        $this->container['header'] = isset($data['header']) ? $data['header'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : 'default';
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sender_id'] === null) {
            $invalidProperties[] = "'sender_id' can't be null";
        }
        if ($this->container['to'] === null) {
            $invalidProperties[] = "'to' can't be null";
        }
        if ($this->container['subject'] === null) {
            $invalidProperties[] = "'subject' can't be null";
        }
        $allowedValues = $this->getPriorityAllowableValues();
        if (!is_null($this->container['priority']) && !in_array($this->container['priority'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'priority', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain the Domain to de used in the sender email.
     *
     * @return $this
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets sender_id
     *
     * @return string
     */
    public function getSenderId()
    {
        return $this->container['sender_id'];
    }

    /**
     * Sets sender_id
     *
     * @param string $sender_id The code identification of the sender profile to be used.
     *
     * @return $this
     */
    public function setSenderId($sender_id)
    {
        $this->container['sender_id'] = $sender_id;

        return $this;
    }

    /**
     * Gets sender_name
     *
     * @return string
     */
    public function getSenderName()
    {
        return $this->container['sender_name'];
    }

    /**
     * Sets sender_name
     *
     * @param string $sender_name The name to be associated with the Domain to form the email.
     *
     * @return $this
     */
    public function setSenderName($sender_name)
    {
        $this->container['sender_name'] = $sender_name;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string[]
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string[] $to The To field in the email.
     *
     * @return $this
     */
    public function setTo($to)
    {
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets cc
     *
     * @return string[]
     */
    public function getCc()
    {
        return $this->container['cc'];
    }

    /**
     * Sets cc
     *
     * @param string[] $cc The Cc field in the email.
     *
     * @return $this
     */
    public function setCc($cc)
    {
        $this->container['cc'] = $cc;

        return $this;
    }

    /**
     * Gets bcc
     *
     * @return string[]
     */
    public function getBcc()
    {
        return $this->container['bcc'];
    }

    /**
     * Sets bcc
     *
     * @param string[] $bcc The Bcc field in the email.
     *
     * @return $this
     */
    public function setBcc($bcc)
    {
        $this->container['bcc'] = $bcc;

        return $this;
    }

    /**
     * Gets reply_to_id
     *
     * @return string
     */
    public function getReplyToId()
    {
        return $this->container['reply_to_id'];
    }

    /**
     * Sets reply_to_id
     *
     * @param string $reply_to_id The email id for if/when the recipient responds to the email.
     *
     * @return $this
     */
    public function setReplyToId($reply_to_id)
    {
        $this->container['reply_to_id'] = $reply_to_id;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject The subject of the message.
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets html_body
     *
     * @return string
     */
    public function getHtmlBody()
    {
        return $this->container['html_body'];
    }

    /**
     * Sets html_body
     *
     * @param string $html_body The html version of the body of the message.
     *
     * @return $this
     */
    public function setHtmlBody($html_body)
    {
        $this->container['html_body'] = $html_body;

        return $this;
    }

    /**
     * Gets text_body
     *
     * @return string
     */
    public function getTextBody()
    {
        return $this->container['text_body'];
    }

    /**
     * Sets text_body
     *
     * @param string $text_body The text version of the body of the message.
     *
     * @return $this
     */
    public function setTextBody($text_body)
    {
        $this->container['text_body'] = $text_body;

        return $this;
    }

    /**
     * Gets open_tracking
     *
     * @return bool
     */
    public function getOpenTracking()
    {
        return $this->container['open_tracking'];
    }

    /**
     * Sets open_tracking
     *
     * @param bool $open_tracking The option to track if the message is opened.
     *
     * @return $this
     */
    public function setOpenTracking($open_tracking)
    {
        $this->container['open_tracking'] = $open_tracking;

        return $this;
    }

    /**
     * Gets click_tracking
     *
     * @return bool
     */
    public function getClickTracking()
    {
        return $this->container['click_tracking'];
    }

    /**
     * Sets click_tracking
     *
     * @param bool $click_tracking The option to track if the message is clicked.
     *
     * @return $this
     */
    public function setClickTracking($click_tracking)
    {
        $this->container['click_tracking'] = $click_tracking;

        return $this;
    }

    /**
     * Gets attachment
     *
     * @return \Swagger\Client\Model\AttachmentRequest[]
     */
    public function getAttachment()
    {
        return $this->container['attachment'];
    }

    /**
     * Sets attachment
     *
     * @param \Swagger\Client\Model\AttachmentRequest[] $attachment A list of files to be attached to the emails
     *
     * @return $this
     */
    public function setAttachment($attachment)
    {
        $this->container['attachment'] = $attachment;

        return $this;
    }

    /**
     * Gets merge_tags
     *
     * @return string[]
     */
    public function getMergeTags()
    {
        return $this->container['merge_tags'];
    }

    /**
     * Sets merge_tags
     *
     * @param string[] $merge_tags A list of the merge tags to replace information gaps in the email. The format of each tag should be ``tagName:tagValue``
     *
     * @return $this
     */
    public function setMergeTags($merge_tags)
    {
        $this->container['merge_tags'] = $merge_tags;

        return $this;
    }

    /**
     * Gets custom_data
     *
     * @return string
     */
    public function getCustomData()
    {
        return $this->container['custom_data'];
    }

    /**
     * Sets custom_data
     *
     * @param string $custom_data Extra Data related to the campaign to be re-sent via WebHook.
     *
     * @return $this
     */
    public function setCustomData($custom_data)
    {
        $this->container['custom_data'] = $custom_data;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return string
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param string $priority The priority of the message.
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $allowedValues = $this->getPriorityAllowableValues();
        if (!is_null($priority) && !in_array($priority, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'priority', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets registered
     *
     * @return bool
     */
    public function getRegistered()
    {
        return $this->container['registered'];
    }

    /**
     * Sets registered
     *
     * @param bool $registered option to register the message. Its an exclusive feature for senders that require it.
     *
     * @return $this
     */
    public function setRegistered($registered)
    {
        $this->container['registered'] = $registered;

        return $this;
    }

    /**
     * Gets header
     *
     * @return \Swagger\Client\Model\HeaderOptionsRequest
     */
    public function getHeader()
    {
        return $this->container['header'];
    }

    /**
     * Sets header
     *
     * @param \Swagger\Client\Model\HeaderOptionsRequest $header header
     *
     * @return $this
     */
    public function setHeader($header)
    {
        $this->container['header'] = $header;

        return $this;
    }

    /**
     * Gets group
     *
     * @return string
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param string $group The group of the message.
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
