<?php
/**
 * SmsReportResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Transactional API
 *
 * # Introduction    This API is a service provided by [E-goi](www.e-goi.com) to send transactional messages.    Transactional Messaging is a 1-to-1 communication channel, usually from an organization directed to a specific consumer.   They can be triggered by:    * __Actions__ - The consumer interacts with the organization (ie.: online shopping);  * __Time__ - The consumer's actions are time-bounded by the organization (ie.: period of inactivity).    Because of the nature of these messages,   it is expected that the consumer is interested in the content of these messages.   Therefore, they have a different treatment from marketing messages, and have a higher acceptance and opening rate.    >DISCLAIMER  >  >Please notice that this platform is more delicate in regards to the nature and processing of its messages.  >  >It should NOT be used as a mean of mass marketing, scams, phishing or overall unruly behaviour.   >  >Failure to comply may lead to limitation of use and even termination of account.    ***
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.21
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SmsReportResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SmsReportResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SmsReportResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'group_id' => 'string',
'group_name' => 'string',
'metrics_total' => 'int',
'metrics_total_parts' => 'int',
'metrics_processed' => 'int',
'metrics_sent' => 'int',
'metrics_sent_parts' => 'int',
'metrics_delivered' => 'int',
'metrics_delivered_parts' => 'int',
'metrics_rejected' => 'int',
'metrics_rejected_parts' => 'int',
'time_period' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'group_id' => null,
'group_name' => null,
'metrics_total' => 'int32',
'metrics_total_parts' => 'int32',
'metrics_processed' => 'int32',
'metrics_sent' => 'int32',
'metrics_sent_parts' => 'int32',
'metrics_delivered' => 'int32',
'metrics_delivered_parts' => 'int32',
'metrics_rejected' => 'int32',
'metrics_rejected_parts' => 'int32',
'time_period' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'group_id' => 'groupId',
'group_name' => 'groupName',
'metrics_total' => 'metricsTotal',
'metrics_total_parts' => 'metricsTotalParts',
'metrics_processed' => 'metricsProcessed',
'metrics_sent' => 'metricsSent',
'metrics_sent_parts' => 'metricsSentParts',
'metrics_delivered' => 'metricsDelivered',
'metrics_delivered_parts' => 'metricsDeliveredParts',
'metrics_rejected' => 'metricsRejected',
'metrics_rejected_parts' => 'metricsRejectedParts',
'time_period' => 'timePeriod'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'group_id' => 'setGroupId',
'group_name' => 'setGroupName',
'metrics_total' => 'setMetricsTotal',
'metrics_total_parts' => 'setMetricsTotalParts',
'metrics_processed' => 'setMetricsProcessed',
'metrics_sent' => 'setMetricsSent',
'metrics_sent_parts' => 'setMetricsSentParts',
'metrics_delivered' => 'setMetricsDelivered',
'metrics_delivered_parts' => 'setMetricsDeliveredParts',
'metrics_rejected' => 'setMetricsRejected',
'metrics_rejected_parts' => 'setMetricsRejectedParts',
'time_period' => 'setTimePeriod'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'group_id' => 'getGroupId',
'group_name' => 'getGroupName',
'metrics_total' => 'getMetricsTotal',
'metrics_total_parts' => 'getMetricsTotalParts',
'metrics_processed' => 'getMetricsProcessed',
'metrics_sent' => 'getMetricsSent',
'metrics_sent_parts' => 'getMetricsSentParts',
'metrics_delivered' => 'getMetricsDelivered',
'metrics_delivered_parts' => 'getMetricsDeliveredParts',
'metrics_rejected' => 'getMetricsRejected',
'metrics_rejected_parts' => 'getMetricsRejectedParts',
'time_period' => 'getTimePeriod'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['group_id'] = isset($data['group_id']) ? $data['group_id'] : null;
        $this->container['group_name'] = isset($data['group_name']) ? $data['group_name'] : null;
        $this->container['metrics_total'] = isset($data['metrics_total']) ? $data['metrics_total'] : null;
        $this->container['metrics_total_parts'] = isset($data['metrics_total_parts']) ? $data['metrics_total_parts'] : null;
        $this->container['metrics_processed'] = isset($data['metrics_processed']) ? $data['metrics_processed'] : null;
        $this->container['metrics_sent'] = isset($data['metrics_sent']) ? $data['metrics_sent'] : null;
        $this->container['metrics_sent_parts'] = isset($data['metrics_sent_parts']) ? $data['metrics_sent_parts'] : null;
        $this->container['metrics_delivered'] = isset($data['metrics_delivered']) ? $data['metrics_delivered'] : null;
        $this->container['metrics_delivered_parts'] = isset($data['metrics_delivered_parts']) ? $data['metrics_delivered_parts'] : null;
        $this->container['metrics_rejected'] = isset($data['metrics_rejected']) ? $data['metrics_rejected'] : null;
        $this->container['metrics_rejected_parts'] = isset($data['metrics_rejected_parts']) ? $data['metrics_rejected_parts'] : null;
        $this->container['time_period'] = isset($data['time_period']) ? $data['time_period'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets group_id
     *
     * @return string
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     *
     * @param string $group_id group_id
     *
     * @return $this
     */
    public function setGroupId($group_id)
    {
        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets group_name
     *
     * @return string
     */
    public function getGroupName()
    {
        return $this->container['group_name'];
    }

    /**
     * Sets group_name
     *
     * @param string $group_name group_name
     *
     * @return $this
     */
    public function setGroupName($group_name)
    {
        $this->container['group_name'] = $group_name;

        return $this;
    }

    /**
     * Gets metrics_total
     *
     * @return int
     */
    public function getMetricsTotal()
    {
        return $this->container['metrics_total'];
    }

    /**
     * Sets metrics_total
     *
     * @param int $metrics_total metrics_total
     *
     * @return $this
     */
    public function setMetricsTotal($metrics_total)
    {
        $this->container['metrics_total'] = $metrics_total;

        return $this;
    }

    /**
     * Gets metrics_total_parts
     *
     * @return int
     */
    public function getMetricsTotalParts()
    {
        return $this->container['metrics_total_parts'];
    }

    /**
     * Sets metrics_total_parts
     *
     * @param int $metrics_total_parts metrics_total_parts
     *
     * @return $this
     */
    public function setMetricsTotalParts($metrics_total_parts)
    {
        $this->container['metrics_total_parts'] = $metrics_total_parts;

        return $this;
    }

    /**
     * Gets metrics_processed
     *
     * @return int
     */
    public function getMetricsProcessed()
    {
        return $this->container['metrics_processed'];
    }

    /**
     * Sets metrics_processed
     *
     * @param int $metrics_processed metrics_processed
     *
     * @return $this
     */
    public function setMetricsProcessed($metrics_processed)
    {
        $this->container['metrics_processed'] = $metrics_processed;

        return $this;
    }

    /**
     * Gets metrics_sent
     *
     * @return int
     */
    public function getMetricsSent()
    {
        return $this->container['metrics_sent'];
    }

    /**
     * Sets metrics_sent
     *
     * @param int $metrics_sent metrics_sent
     *
     * @return $this
     */
    public function setMetricsSent($metrics_sent)
    {
        $this->container['metrics_sent'] = $metrics_sent;

        return $this;
    }

    /**
     * Gets metrics_sent_parts
     *
     * @return int
     */
    public function getMetricsSentParts()
    {
        return $this->container['metrics_sent_parts'];
    }

    /**
     * Sets metrics_sent_parts
     *
     * @param int $metrics_sent_parts metrics_sent_parts
     *
     * @return $this
     */
    public function setMetricsSentParts($metrics_sent_parts)
    {
        $this->container['metrics_sent_parts'] = $metrics_sent_parts;

        return $this;
    }

    /**
     * Gets metrics_delivered
     *
     * @return int
     */
    public function getMetricsDelivered()
    {
        return $this->container['metrics_delivered'];
    }

    /**
     * Sets metrics_delivered
     *
     * @param int $metrics_delivered metrics_delivered
     *
     * @return $this
     */
    public function setMetricsDelivered($metrics_delivered)
    {
        $this->container['metrics_delivered'] = $metrics_delivered;

        return $this;
    }

    /**
     * Gets metrics_delivered_parts
     *
     * @return int
     */
    public function getMetricsDeliveredParts()
    {
        return $this->container['metrics_delivered_parts'];
    }

    /**
     * Sets metrics_delivered_parts
     *
     * @param int $metrics_delivered_parts metrics_delivered_parts
     *
     * @return $this
     */
    public function setMetricsDeliveredParts($metrics_delivered_parts)
    {
        $this->container['metrics_delivered_parts'] = $metrics_delivered_parts;

        return $this;
    }

    /**
     * Gets metrics_rejected
     *
     * @return int
     */
    public function getMetricsRejected()
    {
        return $this->container['metrics_rejected'];
    }

    /**
     * Sets metrics_rejected
     *
     * @param int $metrics_rejected metrics_rejected
     *
     * @return $this
     */
    public function setMetricsRejected($metrics_rejected)
    {
        $this->container['metrics_rejected'] = $metrics_rejected;

        return $this;
    }

    /**
     * Gets metrics_rejected_parts
     *
     * @return int
     */
    public function getMetricsRejectedParts()
    {
        return $this->container['metrics_rejected_parts'];
    }

    /**
     * Sets metrics_rejected_parts
     *
     * @param int $metrics_rejected_parts metrics_rejected_parts
     *
     * @return $this
     */
    public function setMetricsRejectedParts($metrics_rejected_parts)
    {
        $this->container['metrics_rejected_parts'] = $metrics_rejected_parts;

        return $this;
    }

    /**
     * Gets time_period
     *
     * @return string
     */
    public function getTimePeriod()
    {
        return $this->container['time_period'];
    }

    /**
     * Sets time_period
     *
     * @param string $time_period time_period
     *
     * @return $this
     */
    public function setTimePeriod($time_period)
    {
        $this->container['time_period'] = $time_period;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
